{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { KNNEstimator } from './knn';\r\nimport { tensorToDataTexture } from './tensor_to_data_texture';\r\nimport { TSNEOptimizer } from './tsne_optimizer';\r\nexport function maximumPerplexity() {\r\n    var backend = tf.ENV.findBackend('webgl');\r\n    if (backend === null) {\r\n        throw Error('WebGL backend is not available');\r\n    }\r\n    var gl = backend.getGPGPUContext().gl;\r\n    var maxVaryingVectors = gl.getParameter(gl.MAX_VARYING_VECTORS);\r\n    var numNeighbors = (maxVaryingVectors - 1) * 4;\r\n    var maximumPerplexity = Math.floor(numNeighbors / 3);\r\n    return maximumPerplexity;\r\n}\r\nexport function tsne(data, config) {\r\n    return new TSNE(data, config);\r\n}\r\nvar TSNE = (function () {\r\n    function TSNE(data, config) {\r\n        this.initialized = false;\r\n        this.probabilitiesInitialized = false;\r\n        this.data = data;\r\n        this.config = config;\r\n        var inputShape = this.data.shape;\r\n        this.numPoints = inputShape[0];\r\n        this.numDimensions = inputShape[1];\r\n        if (inputShape.length !== 2) {\r\n            throw Error('computeTSNE: input tensor must be 2-dimensional');\r\n        }\r\n        var perplexity = 18;\r\n        if (this.config !== undefined) {\r\n            if (this.config.perplexity !== undefined) {\r\n                perplexity = this.config.perplexity;\r\n            }\r\n        }\r\n        var maxPerplexity = maximumPerplexity();\r\n        if (perplexity > maxPerplexity) {\r\n            throw Error(\"computeTSNE: perplexity cannot be greater than\" +\r\n                (maxPerplexity + \" on this machine\"));\r\n        }\r\n    }\r\n    TSNE.prototype.initialize = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var perplexity, exaggeration, exaggerationIter, exaggerationDecayIter, momentum, _a, exaggerationPolyline, maximumEta, minimumEta, numPointsMaximumEta;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        perplexity = 18;\r\n                        exaggeration = 4;\r\n                        exaggerationIter = 300;\r\n                        exaggerationDecayIter = 200;\r\n                        momentum = 0.8;\r\n                        this.verbose = false;\r\n                        this.knnMode = 'auto';\r\n                        if (this.config !== undefined) {\r\n                            if (this.config.perplexity !== undefined) {\r\n                                perplexity = this.config.perplexity;\r\n                            }\r\n                            if (this.config.exaggeration !== undefined) {\r\n                                exaggeration = this.config.exaggeration;\r\n                            }\r\n                            if (this.config.exaggerationIter !== undefined) {\r\n                                exaggerationIter = this.config.exaggerationIter;\r\n                            }\r\n                            if (this.config.exaggerationDecayIter !== undefined) {\r\n                                exaggerationDecayIter = this.config.exaggerationDecayIter;\r\n                            }\r\n                            if (this.config.momentum !== undefined) {\r\n                                momentum = this.config.momentum;\r\n                            }\r\n                            if (this.config.verbose !== undefined) {\r\n                                this.verbose = this.config.verbose;\r\n                            }\r\n                            if (this.config.knnMode !== undefined) {\r\n                                this.knnMode = this.config.knnMode;\r\n                            }\r\n                        }\r\n                        this.numNeighbors = Math.floor((perplexity * 3) / 4) * 4;\r\n                        _a = this;\r\n                        return [4, tensorToDataTexture(this.data)];\r\n                    case 1:\r\n                        _a.packedData = _b.sent();\r\n                        if (this.verbose) {\r\n                            console.log(\"Number of points:\\t\" + this.numPoints);\r\n                            console.log(\"Number of dimensions:\\t \" + this.numDimensions);\r\n                            console.log(\"Number of neighbors:\\t\" + this.numNeighbors);\r\n                            console.log(\"kNN mode:\\t\" + this.knnMode);\r\n                        }\r\n                        this.knnEstimator = new KNNEstimator(this.packedData.texture, this.packedData.shape, this.numPoints, this.numDimensions, this.numNeighbors, false);\r\n                        this.optimizer = new TSNEOptimizer(this.numPoints, false);\r\n                        exaggerationPolyline = [\r\n                            { iteration: exaggerationIter, value: exaggeration },\r\n                            { iteration: exaggerationIter + exaggerationDecayIter, value: 1 }\r\n                        ];\r\n                        if (this.verbose) {\r\n                            console.log(\"Exaggerating for \" + exaggerationPolyline[0].iteration + \" \" +\r\n                                (\"iterations with a value of \" + exaggerationPolyline[0].value + \". \") +\r\n                                (\"Exaggeration is removed after \" + exaggerationPolyline[1].iteration + \".\"));\r\n                        }\r\n                        this.optimizer.exaggeration = exaggerationPolyline;\r\n                        this.optimizer.momentum = momentum;\r\n                        maximumEta = 2500;\r\n                        minimumEta = 250;\r\n                        numPointsMaximumEta = 2000;\r\n                        if (this.numPoints > numPointsMaximumEta) {\r\n                            this.optimizer.eta = maximumEta;\r\n                        }\r\n                        else {\r\n                            this.optimizer.eta = minimumEta +\r\n                                (maximumEta - minimumEta) * (this.numPoints / numPointsMaximumEta);\r\n                        }\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNE.prototype.compute = function (iterations) {\r\n        if (iterations === void 0) { iterations = 1000; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var knnIter;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        knnIter = this.knnIterations();\r\n                        if (this.verbose) {\r\n                            console.log(\"Number of KNN iterations:\\t\" + knnIter);\r\n                            console.log('Computing the KNN...');\r\n                        }\r\n                        return [4, this.iterateKnn(knnIter)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        if (this.verbose) {\r\n                            console.log('Computing the tSNE embedding...');\r\n                        }\r\n                        return [4, this.iterate(iterations)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        if (this.verbose) {\r\n                            console.log('Done!');\r\n                        }\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNE.prototype.iterateKnn = function (iterations) {\r\n        if (iterations === void 0) { iterations = 1; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var iter;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!!this.initialized) return [3, 2];\r\n                        return [4, this.initialize()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        this.probabilitiesInitialized = false;\r\n                        for (iter = 0; iter < iterations; ++iter) {\r\n                            this.knnEstimator.iterateBruteForce();\r\n                            if ((this.knnEstimator.iteration % 100) === 0 && this.verbose) {\r\n                                console.log(\"Iteration KNN:\\t\" + this.knnEstimator.iteration);\r\n                            }\r\n                        }\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNE.prototype.iterate = function (iterations) {\r\n        if (iterations === void 0) { iterations = 1; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var iter;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!!this.probabilitiesInitialized) return [3, 2];\r\n                        return [4, this.initializeProbabilities()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        iter = 0;\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (!(iter < iterations)) return [3, 6];\r\n                        return [4, this.optimizer.iterate()];\r\n                    case 4:\r\n                        _a.sent();\r\n                        if ((this.optimizer.iteration % 100) === 0 && this.verbose) {\r\n                            console.log(\"Iteration tSNE:\\t\" + this.optimizer.iteration);\r\n                        }\r\n                        _a.label = 5;\r\n                    case 5:\r\n                        ++iter;\r\n                        return [3, 3];\r\n                    case 6: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNE.prototype.knnIterations = function () {\r\n        return Math.ceil(this.numPoints / 20);\r\n    };\r\n    TSNE.prototype.coordinates = function (normalized) {\r\n        var _this = this;\r\n        if (normalized === void 0) { normalized = true; }\r\n        if (normalized) {\r\n            return tf.tidy(function () {\r\n                var rangeX = _this.optimizer.maxX - _this.optimizer.minX;\r\n                var rangeY = _this.optimizer.maxY - _this.optimizer.minY;\r\n                var min = tf.tensor2d([_this.optimizer.minX, _this.optimizer.minY], [1, 2]);\r\n                var max = tf.tensor2d([_this.optimizer.maxX, _this.optimizer.maxY], [1, 2]);\r\n                var range = max.sub(min);\r\n                var maxRange = tf.max(range);\r\n                var offset = tf.tidy(function () {\r\n                    if (rangeX < rangeY) {\r\n                        return tf.tensor2d([(rangeY - rangeX) / 2, 0], [1, 2]);\r\n                    }\r\n                    else {\r\n                        return tf.tensor2d([0, (rangeX - rangeY) / 2], [1, 2]);\r\n                    }\r\n                });\r\n                return _this.optimizer.embedding2D.sub(min).add(offset).div(maxRange);\r\n            });\r\n        }\r\n        else {\r\n            return this.optimizer.embedding2D;\r\n        }\r\n    };\r\n    TSNE.prototype.coordsArray = function (normalized) {\r\n        if (normalized === void 0) { normalized = true; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var coordsData, coords, i;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.coordinates(normalized).data()];\r\n                    case 1:\r\n                        coordsData = _a.sent();\r\n                        coords = [];\r\n                        for (i = 0; i < coordsData.length; i += 2) {\r\n                            coords.push([coordsData[i], coordsData[i + 1]]);\r\n                        }\r\n                        return [2, coords];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNE.prototype.knnTotalDistance = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var sum;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        sum = tf.tidy(function () {\r\n                            var distanceTensor = _this.knnEstimator.distancesTensor();\r\n                            return distanceTensor.sum();\r\n                        });\r\n                        return [4, sum.data()];\r\n                    case 1: return [2, (_a.sent())[0]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNE.prototype.initializeProbabilities = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (this.verbose) {\r\n                            console.log(\"Initializing probabilities\");\r\n                        }\r\n                        return [4, this.optimizer.initializeNeighborsFromKNNTexture(this.knnEstimator.knnShape, this.knnEstimator.knn())];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.probabilitiesInitialized = true;\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return TSNE;\r\n}());\r\nexport { TSNE };\r\n//# sourceMappingURL=tsne.js.map","map":"{\"version\":3,\"file\":\"tsne.js\",\"sourceRoot\":\"\",\"sources\":[\"src/tsne.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/tsne/tfjs-tsne/tsne.d.ts","text":"import * as tf from '@tensorflow/tfjs-core';\r\nexport interface TSNEConfiguration {\r\n    perplexity?: number;\r\n    exaggeration?: number;\r\n    exaggerationIter?: number;\r\n    exaggerationDecayIter?: number;\r\n    momentum?: number;\r\n    verbose?: boolean;\r\n    knnMode: 'auto' | 'bruteForce';\r\n}\r\nexport declare function maximumPerplexity(): number;\r\nexport declare function tsne(data: tf.Tensor, config?: TSNEConfiguration): TSNE;\r\nexport declare class TSNE {\r\n    private data;\r\n    private numPoints;\r\n    private numDimensions;\r\n    private numNeighbors;\r\n    private packedData;\r\n    private verbose;\r\n    private knnEstimator;\r\n    private optimizer;\r\n    private config;\r\n    private initialized;\r\n    private probabilitiesInitialized;\r\n    private knnMode;\r\n    constructor(data: tf.Tensor, config?: TSNEConfiguration);\r\n    private initialize();\r\n    compute(iterations?: number): Promise<void>;\r\n    iterateKnn(iterations?: number): Promise<void>;\r\n    iterate(iterations?: number): Promise<void>;\r\n    knnIterations(): number;\r\n    coordinates(normalized?: boolean): tf.Tensor;\r\n    coordsArray(normalized?: boolean): Promise<number[][]>;\r\n    knnTotalDistance(): Promise<number>;\r\n    private initializeProbabilities();\r\n}\r\n"}}
