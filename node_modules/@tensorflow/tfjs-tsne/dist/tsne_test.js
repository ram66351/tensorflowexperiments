"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs-core");
var tf_tsne = require("./tsne");
function generateData() {
    var numPoints = 300;
    var numDimensions = 10;
    var data = tf.tidy(function () {
        return tf.linspace(0, 1, numPoints * numDimensions)
            .reshape([numPoints, numDimensions])
            .add(tf.randomUniform([numPoints, numDimensions]));
    });
    return data;
}
describe('TSNE class', function () {
    it('throws an error if the perplexity is too high', function () {
        var data = generateData();
        expect(function () {
            tf_tsne.tsne(data, {
                perplexity: 100,
                verbose: false,
                knnMode: 'auto',
            });
        }).toThrow();
        data.dispose();
    });
});
describe('TSNE class', function () {
    it('throws an error if the perplexity is too high on this system ', function () {
        var data = generateData();
        var maximumPerplexity = tf_tsne.maximumPerplexity();
        expect(function () {
            tf_tsne.tsne(data, {
                perplexity: maximumPerplexity + 1,
                verbose: false,
                knnMode: 'auto',
            });
        }).toThrow();
        data.dispose();
    });
});
describe('TSNE class', function () {
    it('does not throw an error if the perplexity is set to the maximum value', function () {
        var data = generateData();
        var maximumPerplexity = tf_tsne.maximumPerplexity();
        expect(function () {
            tf_tsne.tsne(data, {
                perplexity: maximumPerplexity,
                verbose: false,
                knnMode: 'auto',
            });
        }).not.toThrow();
        data.dispose();
    });
});
//# sourceMappingURL=tsne_test.js.map