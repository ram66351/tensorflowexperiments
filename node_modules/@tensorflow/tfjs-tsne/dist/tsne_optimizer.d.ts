import * as tf from '@tensorflow/tfjs-core';
import { RearrangedData } from './interfaces';
export declare class TSNEOptimizer {
    private _eta;
    private _momentum;
    private _exaggeration;
    private rawExaggeration;
    private verbose;
    private numPoints;
    private pointsPerRow;
    private numRows;
    private splatTextureDiameter;
    private kernelTextureDiameter;
    private kernelSupport;
    private embedding;
    private gradient;
    private backend;
    private gpgpu;
    private embeddingInitializationProgram;
    private embeddingSplatterProgram;
    private qInterpolatorProgram;
    private xyInterpolatorProgram;
    private attractiveForcesProgram;
    private distributionParameterssComputationProgram;
    private gaussiaDistributionsFromDistancesProgram;
    private _splatTexture;
    private kernelTexture;
    private splatVertexIdBuffer;
    private probOffsetTexture;
    private probNeighIdTexture;
    private probTexture;
    private numNeighPerRow;
    private _minX;
    private _maxX;
    private _minY;
    private _maxY;
    private _normQ;
    private _iteration;
    readonly minX: number;
    readonly maxX: number;
    readonly minY: number;
    readonly maxY: number;
    readonly iteration: number;
    readonly numberOfPoints: number;
    readonly numberOfPointsPerRow: number;
    readonly numberOfRows: number;
    readonly embeddingCoordinates: tf.Tensor<tf.Rank>;
    readonly embedding2D: tf.Tensor;
    readonly embeddingTexture: WebGLTexture;
    readonly splatTexture: WebGLTexture;
    readonly normalizationQ: number;
    readonly exaggerationAtCurrentIteration: number;
    exaggeration: number | Array<{
        iteration: number;
        value: number;
    }>;
    momentum: number;
    eta: number;
    constructor(numPoints: number, verbose?: boolean, splatTextureDiameter?: number, kernelTextureRadius?: number);
    dispose(): void;
    initializeEmbedding(): void;
    initializeNeighbors(numNeighPerRow: number, offsets: WebGLTexture, probabilities: WebGLTexture, neighIds: WebGLTexture): void;
    initializeNeighborsFromKNNGraph(numPoints: number, numNeighbors: number, distances: Float32Array, indices: Uint32Array): Promise<void>;
    initializeNeighborsFromKNNTexture(shape: RearrangedData, knnGraph: WebGLTexture): Promise<void>;
    initializedNeighborhoods(): boolean;
    updateExaggeration(): void;
    iterate(): Promise<void>;
    private log(str, obj?);
    private initializeRepulsiveForceTextures();
    private initilizeCustomWebGLPrograms();
    private computeBoundaries();
    private updateSplatTextureDiameter();
    private initializeEmbeddingPositions(embedding, random);
    private splatPoints();
    private computeInterpolatedQ(interpolatedQ);
    private computeInterpolatedXY(interpolatedXY);
    private computeAttractiveForces(attractiveForces);
    private computeDistributionParameters(distributionParameters, shape, perplexity, knnGraph);
    private computeGaussianDistributions(distributions, distributionParameters, shape, knnGraph);
}
