{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport * as gl_util from './gl_util';\r\nexport function tensorToDataTexture(tensor) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var inputShape, backend, gpgpu, numPoints, numDimensions, numChannels, pixelsPerPoint, pointsPerRow, numRows, tensorData, textureValues, p, tensorOffset, textureOffset, d, texture, shape;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            inputShape = tensor.shape;\r\n            if (inputShape.length !== 2) {\r\n                throw Error('tensorToDataTexture: input tensor must be 2-dimensional');\r\n            }\r\n            backend = tf.ENV.findBackend('webgl');\r\n            if (backend === null) {\r\n                throw Error('WebGL backend is not available');\r\n            }\r\n            gpgpu = backend.getGPGPUContext();\r\n            numPoints = inputShape[0];\r\n            numDimensions = inputShape[1];\r\n            numChannels = 4;\r\n            pixelsPerPoint = Math.ceil(numDimensions / numChannels);\r\n            pointsPerRow = Math.floor(Math.sqrt(numPoints * pixelsPerPoint) / pixelsPerPoint);\r\n            numRows = Math.ceil(numPoints / pointsPerRow);\r\n            tensorData = tensor.dataSync();\r\n            textureValues = new Float32Array(pointsPerRow * pixelsPerPoint * numRows * numChannels);\r\n            for (p = 0; p < numPoints; ++p) {\r\n                tensorOffset = p * numDimensions;\r\n                textureOffset = p * pixelsPerPoint * numChannels;\r\n                for (d = 0; d < numDimensions; ++d) {\r\n                    textureValues[textureOffset + d] = tensorData[tensorOffset + d];\r\n                }\r\n            }\r\n            texture = gl_util.createAndConfigureTexture(gpgpu.gl, pointsPerRow * pixelsPerPoint, numRows, 4, textureValues);\r\n            shape = { numPoints: numPoints, pointsPerRow: pointsPerRow, numRows: numRows, pixelsPerPoint: pixelsPerPoint };\r\n            return [2, { shape: shape, texture: texture }];\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=tensor_to_data_texture.js.map","map":"{\"version\":3,\"file\":\"tensor_to_data_texture.js\",\"sourceRoot\":\"\",\"sources\":[\"src/tensor_to_data_texture.ts\"],\"names\":[],\"mappings\":\";AAiBA,OAAO,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC5C,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AASrC,MAAM,8BAAoC,MAAiB;;;;YAEnD,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC;YAChC,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,MAAM,KAAK,CAAC,yDAAyD,CAAC,CAAC;aACxE;YAGK,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAA8B,CAAC;YACzE,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,MAAM,KAAK,CAAC,gCAAgC,CAAC,CAAC;aAC/C;YACK,KAAK,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC;YAGlC,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAC1B,aAAa,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAC9B,WAAW,GAAG,CAAC,CAAC;YAChB,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,CAAC;YACxD,YAAY,GACd,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,GAAG,cAAc,CAAC,CAAC;YACjE,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,CAAC;YAE9C,UAAU,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAI/B,aAAa,GACf,IAAI,YAAY,CAAC,YAAY,GAAG,cAAc,GAAG,OAAO,GAAG,WAAW,CAAC,CAAC;YAE5E,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;gBAC5B,YAAY,GAAG,CAAC,GAAG,aAAa,CAAC;gBACjC,aAAa,GAAG,CAAC,GAAG,cAAc,GAAG,WAAW,CAAC;gBACvD,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,EAAE,CAAC,EAAE;oBACtC,aAAa,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;iBACjE;aACF;YAEK,OAAO,GAAG,OAAO,CAAC,yBAAyB,CAC7C,KAAK,CAAC,EAAE,EAAE,YAAY,GAAG,cAAc,EAAE,OAAO,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;YAClE,KAAK,GAAG,EAAC,SAAS,WAAA,EAAE,YAAY,cAAA,EAAE,OAAO,SAAA,EAAE,cAAc,gBAAA,EAAC,CAAC;YAEjE,WAAO,EAAC,KAAK,OAAA,EAAE,OAAO,SAAA,EAAC,EAAC;;;CACzB\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/tsne/tfjs-tsne/tensor_to_data_texture.d.ts","text":"import * as tf from '@tensorflow/tfjs-core';\r\nimport { RearrangedData } from './interfaces';\r\nexport declare function tensorToDataTexture(tensor: tf.Tensor): Promise<{\r\n    shape: RearrangedData;\r\n    texture: WebGLTexture;\r\n}>;\r\n"}}
