{"code":"import * as tf from '@tensorflow/tfjs-core';\r\nimport * as dataset_util from './dataset_util';\r\nimport * as gl_util from './gl_util';\r\nimport * as knn_util from './knn_util';\r\nfunction instanceOfRearrangedData(object) {\r\n    return 'numPoints' in object && 'pointsPerRow' in object &&\r\n        'pixelsPerPoint' in object && 'numRows' in object;\r\n}\r\nfunction instanceOfCustomDataDefinition(object) {\r\n    return 'distanceComputationCode' in object;\r\n}\r\nvar KNNEstimator = (function () {\r\n    function KNNEstimator(dataTexture, dataFormat, numPoints, numDimensions, numNeighs, verbose) {\r\n        if (verbose != null) {\r\n            this.verbose = verbose;\r\n        }\r\n        else {\r\n            verbose = false;\r\n        }\r\n        this.backend = tf.ENV.findBackend('webgl');\r\n        this.gpgpu = this.backend.getGPGPUContext();\r\n        this._iteration = 0;\r\n        this.dataTexture = dataTexture;\r\n        if (numNeighs > 128) {\r\n            throw new Error('kNN size must not be greater than 128');\r\n        }\r\n        if (numNeighs % 4 !== 0) {\r\n            throw new Error('kNN size must be a multiple of 4');\r\n        }\r\n        this.numNeighs = numNeighs;\r\n        var knnPointsPerRow = Math.ceil(Math.sqrt(numNeighs * numPoints) / numNeighs);\r\n        this.knnDataShape = {\r\n            numPoints: numPoints,\r\n            pixelsPerPoint: numNeighs,\r\n            pointsPerRow: knnPointsPerRow,\r\n            numRows: Math.ceil(numPoints / knnPointsPerRow)\r\n        };\r\n        this.log('knn-pntsPerRow', this.knnDataShape.pointsPerRow);\r\n        this.log('knn-numRows', this.knnDataShape.numRows);\r\n        this.log('knn-pixelsPerPoint', this.knnDataShape.pixelsPerPoint);\r\n        var distanceComputationSource;\r\n        if (instanceOfRearrangedData(dataFormat)) {\r\n            var rearrangedData = dataFormat;\r\n            distanceComputationSource =\r\n                dataset_util.generateDistanceComputationSource(rearrangedData);\r\n        }\r\n        else if (instanceOfCustomDataDefinition(dataFormat)) {\r\n            var customDataDefinition = dataFormat;\r\n            distanceComputationSource = customDataDefinition.distanceComputationCode;\r\n        }\r\n        this.initializeTextures();\r\n        this.initilizeCustomWebGLPrograms(distanceComputationSource);\r\n    }\r\n    Object.defineProperty(KNNEstimator.prototype, \"knnShape\", {\r\n        get: function () { return this.knnDataShape; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(KNNEstimator.prototype, \"iteration\", {\r\n        get: function () { return this._iteration; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(KNNEstimator.prototype, \"pointsPerIteration\", {\r\n        get: function () { return 20; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    KNNEstimator.prototype.log = function (str, obj) {\r\n        if (this.verbose) {\r\n            if (obj != null) {\r\n                console.log(str + \": \\t\" + obj);\r\n            }\r\n            else {\r\n                console.log(str);\r\n            }\r\n        }\r\n    };\r\n    KNNEstimator.prototype.initializeTextures = function () {\r\n        var initNeigh = new Float32Array(this.knnDataShape.pointsPerRow *\r\n            this.knnDataShape.pixelsPerPoint * 2 *\r\n            this.knnDataShape.numRows);\r\n        var numNeighs = this.knnDataShape.pixelsPerPoint;\r\n        for (var i = 0; i < this.knnDataShape.numPoints; ++i) {\r\n            for (var n = 0; n < numNeighs; ++n) {\r\n                initNeigh[(i * numNeighs + n) * 2] = -1;\r\n                initNeigh[(i * numNeighs + n) * 2 + 1] = 10e30;\r\n            }\r\n        }\r\n        this.knnTexture0 = gl_util.createAndConfigureTexture(this.gpgpu.gl, this.knnDataShape.pointsPerRow * this.knnDataShape.pixelsPerPoint, this.knnDataShape.numRows, 2, initNeigh);\r\n        this.knnTexture1 = gl_util.createAndConfigureTexture(this.gpgpu.gl, this.knnDataShape.pointsPerRow * this.knnDataShape.pixelsPerPoint, this.knnDataShape.numRows, 2, initNeigh);\r\n    };\r\n    KNNEstimator.prototype.initilizeCustomWebGLPrograms = function (distanceComputationSource) {\r\n        this.copyDistancesProgram = knn_util.createCopyDistancesProgram(this.gpgpu);\r\n        this.copyIndicesProgram = knn_util.createCopyIndicesProgram(this.gpgpu);\r\n        this.bruteForceKNNProgram = knn_util.createBruteForceKNNProgram(this.gpgpu, this.numNeighs, distanceComputationSource);\r\n        this.randomSamplingKNNProgram = knn_util.createRandomSamplingKNNProgram(this.gpgpu, this.numNeighs, distanceComputationSource);\r\n        this.kNNDescentProgram = knn_util.createKNNDescentProgram(this.gpgpu, this.numNeighs, distanceComputationSource);\r\n        var linesVertexId = new Float32Array(this.knnDataShape.numPoints * 2);\r\n        {\r\n            for (var i = 0; i < this.knnDataShape.numPoints * 2; ++i) {\r\n                linesVertexId[i] = i;\r\n            }\r\n        }\r\n        this.linesVertexIdBuffer = tf.webgl.webgl_util.createStaticVertexBuffer(this.gpgpu.gl, linesVertexId);\r\n    };\r\n    KNNEstimator.prototype.iterateBruteForce = function () {\r\n        if ((this._iteration % 2) === 0) {\r\n            this.iterateGPU(this.dataTexture, this._iteration, this.knnTexture0, this.knnTexture1);\r\n        }\r\n        else {\r\n            this.iterateGPU(this.dataTexture, this._iteration, this.knnTexture1, this.knnTexture0);\r\n        }\r\n        ++this._iteration;\r\n        this.gpgpu.gl.finish();\r\n    };\r\n    KNNEstimator.prototype.iterateRandomSampling = function () {\r\n        if ((this._iteration % 2) === 0) {\r\n            this.iterateRandomSamplingGPU(this.dataTexture, this._iteration, this.knnTexture0, this.knnTexture1);\r\n        }\r\n        else {\r\n            this.iterateRandomSamplingGPU(this.dataTexture, this._iteration, this.knnTexture1, this.knnTexture0);\r\n        }\r\n        ++this._iteration;\r\n        this.gpgpu.gl.finish();\r\n    };\r\n    KNNEstimator.prototype.iterateKNNDescent = function () {\r\n        if ((this._iteration % 2) === 0) {\r\n            this.iterateKNNDescentGPU(this.dataTexture, this._iteration, this.knnTexture0, this.knnTexture1);\r\n        }\r\n        else {\r\n            this.iterateKNNDescentGPU(this.dataTexture, this._iteration, this.knnTexture1, this.knnTexture0);\r\n        }\r\n        ++this._iteration;\r\n        this.gpgpu.gl.finish();\r\n    };\r\n    KNNEstimator.prototype.knn = function () {\r\n        if ((this._iteration % 2) === 0) {\r\n            return this.knnTexture0;\r\n        }\r\n        else {\r\n            return this.knnTexture1;\r\n        }\r\n    };\r\n    KNNEstimator.prototype.distancesTensor = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var distances = tf.zeros([\r\n                _this.knnDataShape.numRows,\r\n                _this.knnDataShape.pointsPerRow * _this.knnDataShape.pixelsPerPoint\r\n            ]);\r\n            var knnTexture = _this.knn();\r\n            knn_util.executeCopyDistancesProgram(_this.gpgpu, _this.copyDistancesProgram, knnTexture, _this.knnDataShape, _this.backend.getTexture(distances.dataId));\r\n            return distances\r\n                .reshape([\r\n                _this.knnDataShape.numRows * _this.knnDataShape.pointsPerRow,\r\n                _this.knnDataShape.pixelsPerPoint\r\n            ])\r\n                .slice([0, 0], [\r\n                _this.knnDataShape.numPoints, _this.knnDataShape.pixelsPerPoint\r\n            ]);\r\n        });\r\n    };\r\n    KNNEstimator.prototype.indicesTensor = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var indices = tf.zeros([\r\n                _this.knnDataShape.numRows,\r\n                _this.knnDataShape.pointsPerRow * _this.knnDataShape.pixelsPerPoint\r\n            ]);\r\n            var knnTexture = _this.knn();\r\n            knn_util.executeCopyIndicesProgram(_this.gpgpu, _this.copyIndicesProgram, knnTexture, _this.knnDataShape, _this.backend.getTexture(indices.dataId));\r\n            return indices\r\n                .reshape([\r\n                _this.knnDataShape.numRows * _this.knnDataShape.pointsPerRow,\r\n                _this.knnDataShape.pixelsPerPoint\r\n            ])\r\n                .slice([0, 0], [\r\n                _this.knnDataShape.numPoints, _this.knnDataShape.pixelsPerPoint\r\n            ]);\r\n        });\r\n    };\r\n    KNNEstimator.prototype.iterateGPU = function (dataTexture, _iteration, startingKNNTexture, targetTexture) {\r\n        knn_util.executeKNNProgram(this.gpgpu, this.bruteForceKNNProgram, dataTexture, startingKNNTexture, _iteration, this.knnDataShape, this.linesVertexIdBuffer, targetTexture);\r\n    };\r\n    KNNEstimator.prototype.iterateRandomSamplingGPU = function (dataTexture, _iteration, startingKNNTexture, targetTexture) {\r\n        knn_util.executeKNNProgram(this.gpgpu, this.randomSamplingKNNProgram, dataTexture, startingKNNTexture, _iteration, this.knnDataShape, this.linesVertexIdBuffer, targetTexture);\r\n    };\r\n    KNNEstimator.prototype.iterateKNNDescentGPU = function (dataTexture, _iteration, startingKNNTexture, targetTexture) {\r\n        knn_util.executeKNNProgram(this.gpgpu, this.kNNDescentProgram, dataTexture, startingKNNTexture, _iteration, this.knnDataShape, this.linesVertexIdBuffer, targetTexture);\r\n    };\r\n    return KNNEstimator;\r\n}());\r\nexport { KNNEstimator };\r\n//# sourceMappingURL=knn.js.map","map":"{\"version\":3,\"file\":\"knn.js\",\"sourceRoot\":\"\",\"sources\":[\"src/knn.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/tsne/tfjs-tsne/knn.d.ts","text":"import * as tf from '@tensorflow/tfjs-core';\r\nimport { RearrangedData } from './interfaces';\r\nexport interface CustomDataDefinition {\r\n    distanceComputationCode: string;\r\n}\r\nexport declare class KNNEstimator {\r\n    private verbose;\r\n    private backend;\r\n    private gpgpu;\r\n    private _iteration;\r\n    private numNeighs;\r\n    private bruteForceKNNProgram;\r\n    private randomSamplingKNNProgram;\r\n    private kNNDescentProgram;\r\n    private copyDistancesProgram;\r\n    private copyIndicesProgram;\r\n    private linesVertexIdBuffer;\r\n    private dataTexture;\r\n    private knnTexture0;\r\n    private knnTexture1;\r\n    private knnDataShape;\r\n    readonly knnShape: RearrangedData;\r\n    readonly iteration: number;\r\n    readonly pointsPerIteration: number;\r\n    constructor(dataTexture: WebGLTexture, dataFormat: RearrangedData | CustomDataDefinition, numPoints: number, numDimensions: number, numNeighs: number, verbose?: boolean);\r\n    private log(str, obj?);\r\n    private initializeTextures();\r\n    private initilizeCustomWebGLPrograms(distanceComputationSource);\r\n    iterateBruteForce(): void;\r\n    iterateRandomSampling(): void;\r\n    iterateKNNDescent(): void;\r\n    knn(): WebGLTexture;\r\n    distancesTensor(): tf.Tensor;\r\n    indicesTensor(): tf.Tensor;\r\n    private iterateGPU(dataTexture, _iteration, startingKNNTexture, targetTexture?);\r\n    private iterateRandomSamplingGPU(dataTexture, _iteration, startingKNNTexture, targetTexture?);\r\n    private iterateKNNDescentGPU(dataTexture, _iteration, startingKNNTexture, targetTexture?);\r\n}\r\n"}}
