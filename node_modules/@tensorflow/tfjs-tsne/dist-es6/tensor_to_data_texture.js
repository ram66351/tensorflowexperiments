var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as tf from '@tensorflow/tfjs-core';
import * as gl_util from './gl_util';
export function tensorToDataTexture(tensor) {
    return __awaiter(this, void 0, void 0, function () {
        var inputShape, backend, gpgpu, numPoints, numDimensions, numChannels, pixelsPerPoint, pointsPerRow, numRows, tensorData, textureValues, p, tensorOffset, textureOffset, d, texture, shape;
        return __generator(this, function (_a) {
            inputShape = tensor.shape;
            if (inputShape.length !== 2) {
                throw Error('tensorToDataTexture: input tensor must be 2-dimensional');
            }
            backend = tf.ENV.findBackend('webgl');
            if (backend === null) {
                throw Error('WebGL backend is not available');
            }
            gpgpu = backend.getGPGPUContext();
            numPoints = inputShape[0];
            numDimensions = inputShape[1];
            numChannels = 4;
            pixelsPerPoint = Math.ceil(numDimensions / numChannels);
            pointsPerRow = Math.floor(Math.sqrt(numPoints * pixelsPerPoint) / pixelsPerPoint);
            numRows = Math.ceil(numPoints / pointsPerRow);
            tensorData = tensor.dataSync();
            textureValues = new Float32Array(pointsPerRow * pixelsPerPoint * numRows * numChannels);
            for (p = 0; p < numPoints; ++p) {
                tensorOffset = p * numDimensions;
                textureOffset = p * pixelsPerPoint * numChannels;
                for (d = 0; d < numDimensions; ++d) {
                    textureValues[textureOffset + d] = tensorData[tensorOffset + d];
                }
            }
            texture = gl_util.createAndConfigureTexture(gpgpu.gl, pointsPerRow * pixelsPerPoint, numRows, 4, textureValues);
            shape = { numPoints: numPoints, pointsPerRow: pointsPerRow, numRows: numRows, pixelsPerPoint: pixelsPerPoint };
            return [2, { shape: shape, texture: texture }];
        });
    });
}
//# sourceMappingURL=tensor_to_data_texture.js.map