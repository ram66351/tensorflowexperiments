{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport * as gl_util from './gl_util';\r\nimport * as knn_util from './knn_util';\r\nimport * as tsne_util from './tsne_optimizer_util';\r\nvar TSNEOptimizer = (function () {\r\n    function TSNEOptimizer(numPoints, verbose, splatTextureDiameter, kernelTextureRadius) {\r\n        if (verbose != null) {\r\n            this.verbose = verbose;\r\n        }\r\n        else {\r\n            verbose = false;\r\n        }\r\n        this.log('Initializing the tSNE gradient descent computation...');\r\n        this.numPoints = numPoints;\r\n        this._iteration = 0;\r\n        var webglVersion = tf.ENV.get('WEBGL_VERSION');\r\n        if (webglVersion === 1) {\r\n            throw Error('WebGL version 1 is not supported by tfjs-tsne');\r\n        }\r\n        this.backend = tf.ENV.findBackend('webgl');\r\n        if (this.backend === null) {\r\n            throw Error('WebGL backend is not available');\r\n        }\r\n        this.gpgpu = this.backend.getGPGPUContext();\r\n        tf.webgl.webgl_util.getExtensionOrThrow(this.gpgpu.gl, 'OES_texture_float_linear');\r\n        this.pointsPerRow = Math.ceil(Math.sqrt(numPoints * 2));\r\n        if (this.pointsPerRow % 2 === 1) {\r\n            ++this.pointsPerRow;\r\n        }\r\n        this.pointsPerRow /= 2;\r\n        this.numRows = Math.ceil(numPoints / this.pointsPerRow);\r\n        this.log('\\t# points per row', this.pointsPerRow);\r\n        this.log('\\t# rows', this.numRows);\r\n        this._eta = 2500;\r\n        this._momentum = tf.scalar(0.8);\r\n        this.rawExaggeration =\r\n            [{ iteration: 200, value: 4 }, { iteration: 600, value: 1 }];\r\n        this.updateExaggeration();\r\n        if (splatTextureDiameter == null) {\r\n            splatTextureDiameter = 5;\r\n        }\r\n        this.splatTextureDiameter = splatTextureDiameter;\r\n        if (kernelTextureRadius == null) {\r\n            kernelTextureRadius = 50;\r\n        }\r\n        this.kernelTextureDiameter = kernelTextureRadius * 2 + 1;\r\n        this.initializeRepulsiveForceTextures();\r\n        this.log('\\tSplat texture diameter', this.splatTextureDiameter);\r\n        this.log('\\tKernel texture diameter', this.kernelTextureDiameter);\r\n        this.initilizeCustomWebGLPrograms();\r\n        this.initializeEmbedding();\r\n        this.log('\\tEmbedding', this.embedding);\r\n        this.log('\\tGradient', this.gradient);\r\n    }\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"minX\", {\r\n        get: function () { return this._minX; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"maxX\", {\r\n        get: function () { return this._maxX; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"minY\", {\r\n        get: function () { return this._minY; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"maxY\", {\r\n        get: function () { return this._maxY; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"iteration\", {\r\n        get: function () { return this._iteration; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"numberOfPoints\", {\r\n        get: function () { return this.numPoints; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"numberOfPointsPerRow\", {\r\n        get: function () { return this.pointsPerRow; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"numberOfRows\", {\r\n        get: function () { return this.numRows; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"embeddingCoordinates\", {\r\n        get: function () { return this.embedding; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"embedding2D\", {\r\n        get: function () {\r\n            var _this = this;\r\n            var result = tf.tidy(function () {\r\n                var reshaped = _this.embedding.reshape([_this.numRows * _this.pointsPerRow, 2])\r\n                    .slice([0, 0], [_this.numPoints, 2]);\r\n                return reshaped;\r\n            });\r\n            return result;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"embeddingTexture\", {\r\n        get: function () {\r\n            return this.backend.getTexture(this.embedding.dataId);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"splatTexture\", {\r\n        get: function () { return this._splatTexture; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"normalizationQ\", {\r\n        get: function () { return this._normQ; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"exaggerationAtCurrentIteration\", {\r\n        get: function () {\r\n            return this._exaggeration.get();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"exaggeration\", {\r\n        get: function () {\r\n            return this.rawExaggeration;\r\n        },\r\n        set: function (ex) {\r\n            this.rawExaggeration = ex;\r\n            if (typeof ex === 'number') {\r\n                if (ex < 1) {\r\n                    throw Error('Exaggeration must be greater then or equal to one');\r\n                }\r\n            }\r\n            else {\r\n                for (var i = 0; i < ex.length; ++i) {\r\n                    if (ex[i].value < 1) {\r\n                        throw Error('Exaggeration must be greater then or equal to one');\r\n                    }\r\n                    if (ex[i].iteration < 0) {\r\n                        throw Error('Piecewise linear exaggeration function \\\n                                        must have poistive iteration values');\r\n                    }\r\n                }\r\n                for (var i = 0; i < ex.length - 1; ++i) {\r\n                    if (ex[i].iteration >= ex[i + 1].iteration) {\r\n                        throw Error('Piecewise linear exaggeration function \\\n                                      must have increasing iteration values');\r\n                    }\r\n                }\r\n                if (ex.length === 1) {\r\n                    this.exaggeration = ex[0].value;\r\n                }\r\n            }\r\n            this.updateExaggeration();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"momentum\", {\r\n        get: function () { return this._momentum.get(); },\r\n        set: function (mom) {\r\n            if (mom < 0 || mom > 1) {\r\n                throw Error('Momentum must be in the [0,1] range');\r\n            }\r\n            this._momentum.dispose();\r\n            this._momentum = tf.scalar(mom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TSNEOptimizer.prototype, \"eta\", {\r\n        get: function () { return this._eta; },\r\n        set: function (eta) {\r\n            if (eta <= 0) {\r\n                throw Error('ETA must be greater then zero');\r\n            }\r\n            this._eta = eta;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TSNEOptimizer.prototype.dispose = function () {\r\n        this.embedding.dispose();\r\n        this.gradient.dispose();\r\n        this._momentum.dispose();\r\n        this._exaggeration.dispose();\r\n        this.gpgpu.gl.deleteTexture(this._splatTexture);\r\n        this.gpgpu.gl.deleteTexture(this.kernelTexture);\r\n        if (this.kernelTexture != null) {\r\n            this.gpgpu.gl.deleteTexture(this.probOffsetTexture);\r\n        }\r\n        if (this.kernelTexture != null) {\r\n            this.gpgpu.gl.deleteTexture(this.probNeighIdTexture);\r\n        }\r\n        if (this.kernelTexture != null) {\r\n            this.gpgpu.gl.deleteTexture(this.probTexture);\r\n        }\r\n        this.gpgpu.gl.deleteBuffer(this.splatVertexIdBuffer);\r\n        this.gpgpu.gl.deleteProgram(this.embeddingInitializationProgram);\r\n        this.gpgpu.gl.deleteProgram(this.embeddingSplatterProgram);\r\n        this.gpgpu.gl.deleteProgram(this.qInterpolatorProgram);\r\n        this.gpgpu.gl.deleteProgram(this.xyInterpolatorProgram);\r\n        this.gpgpu.gl.deleteProgram(this.attractiveForcesProgram);\r\n        this.gpgpu.gl.deleteProgram(this.distributionParameterssComputationProgram);\r\n        this.gpgpu.gl.deleteProgram(this.gaussiaDistributionsFromDistancesProgram);\r\n    };\r\n    TSNEOptimizer.prototype.initializeEmbedding = function () {\r\n        var _this = this;\r\n        if (this.embedding != null) {\r\n            this.embedding.dispose();\r\n        }\r\n        if (this.gradient != null) {\r\n            this.gradient.dispose();\r\n        }\r\n        this.gradient = tf.zeros([this.numRows, this.pointsPerRow * 2]);\r\n        this.embedding = tf.tidy(function () {\r\n            var randomData = tf.randomUniform([_this.numRows, _this.pointsPerRow * 2]);\r\n            var embedding = tf.zeros([_this.numRows, _this.pointsPerRow * 2]);\r\n            _this.initializeEmbeddingPositions(embedding, randomData);\r\n            return embedding;\r\n        });\r\n        var maxEmbeddingAbsCoordinate = 3;\r\n        this._minX = -maxEmbeddingAbsCoordinate;\r\n        this._minY = -maxEmbeddingAbsCoordinate;\r\n        this._maxX = maxEmbeddingAbsCoordinate;\r\n        this._maxY = maxEmbeddingAbsCoordinate;\r\n        this.log('\\tmin X', this._minX);\r\n        this.log('\\tmax X', this._maxX);\r\n        this.log('\\tmin Y', this._minY);\r\n        this.log('\\tmax Y', this._maxY);\r\n        this._iteration = 0;\r\n    };\r\n    TSNEOptimizer.prototype.initializeNeighbors = function (numNeighPerRow, offsets, probabilities, neighIds) {\r\n        this.numNeighPerRow = numNeighPerRow;\r\n        this.probOffsetTexture = offsets;\r\n        this.probTexture = probabilities;\r\n        this.probNeighIdTexture = neighIds;\r\n    };\r\n    TSNEOptimizer.prototype.initializeNeighborsFromKNNGraph = function (numPoints, numNeighbors, distances, indices) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var pointsPerRow, numRows, dataShape, textureValues, i, n, id, knnGraphTexture;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        pointsPerRow = Math.floor(Math.sqrt(numPoints * numNeighbors) / numNeighbors);\r\n                        numRows = Math.ceil(numPoints / pointsPerRow);\r\n                        dataShape = { numPoints: numPoints, pixelsPerPoint: numNeighbors, numRows: numRows, pointsPerRow: pointsPerRow };\r\n                        textureValues = new Float32Array(pointsPerRow * numNeighbors * numRows * 2);\r\n                        for (i = 0; i < numPoints; ++i) {\r\n                            for (n = 0; n < numNeighbors; ++n) {\r\n                                id = (i * numNeighbors + n);\r\n                                textureValues[id * 2] = indices[id];\r\n                                textureValues[id * 2 + 1] = distances[id];\r\n                            }\r\n                        }\r\n                        knnGraphTexture = gl_util.createAndConfigureTexture(this.gpgpu.gl, pointsPerRow * numNeighbors, numRows, 2, textureValues);\r\n                        return [4, this.initializeNeighborsFromKNNTexture(dataShape, knnGraphTexture)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.gpgpu.gl.deleteTexture(knnGraphTexture);\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNEOptimizer.prototype.initializeNeighborsFromKNNTexture = function (shape, knnGraph) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var distributionParameters, gaussianDistributions, perplexity, gaussianDistributionsData, knnIndices, copyIndicesProgram, knnIndicesData, asymNeighIds, i, d, linearId, neighborCounter, neighborLinearOffset, i, i, check, maxValue, maxId, i, offsets, pointOffset, i, totalNeighbors, probabilities, neighIds, assignedNeighborCounter, i, n, linearId, pointId, probability, symMatrixDirectId, symMatrixIndirectId;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.log('Asymmetric neighborhood initialization...');\r\n                        if (shape.numPoints !== this.numPoints) {\r\n                            throw new Error(\"KNN size and number of points must agree\" +\r\n                                (\"(\" + shape.numPoints + \",\" + this.numPoints + \")\"));\r\n                        }\r\n                        distributionParameters = gl_util.createAndConfigureTexture(this.gpgpu.gl, shape.pointsPerRow, shape.numRows, 2);\r\n                        gaussianDistributions = tf.zeros([shape.numRows, shape.pointsPerRow * shape.pixelsPerPoint]);\r\n                        perplexity = shape.pixelsPerPoint / 3;\r\n                        this.computeDistributionParameters(distributionParameters, shape, perplexity, knnGraph);\r\n                        this.computeGaussianDistributions(gaussianDistributions, distributionParameters, shape, knnGraph);\r\n                        return [4, gaussianDistributions.data()];\r\n                    case 1:\r\n                        gaussianDistributionsData = _a.sent();\r\n                        this.log('Gaussian distributions', gaussianDistributions);\r\n                        knnIndices = tf.zeros([shape.numRows, shape.pointsPerRow * shape.pixelsPerPoint]);\r\n                        copyIndicesProgram = knn_util.createCopyIndicesProgram(this.gpgpu);\r\n                        knn_util.executeCopyIndicesProgram(this.gpgpu, copyIndicesProgram, knnGraph, shape, this.backend.getTexture(knnIndices.dataId));\r\n                        return [4, knnIndices.data()];\r\n                    case 2:\r\n                        knnIndicesData = _a.sent();\r\n                        this.log('knn Indices', knnIndices);\r\n                        asymNeighIds = new Float32Array(shape.numPoints * shape.pixelsPerPoint);\r\n                        for (i = 0; i < this.numPoints; ++i) {\r\n                            for (d = 0; d < shape.pixelsPerPoint; ++d) {\r\n                                linearId = i * shape.pixelsPerPoint + d;\r\n                                asymNeighIds[i * shape.pixelsPerPoint + d] = knnIndicesData[linearId];\r\n                            }\r\n                        }\r\n                        this.log('NeighIds', asymNeighIds);\r\n                        neighborCounter = new Uint32Array(this.numPoints);\r\n                        neighborLinearOffset = new Uint32Array(this.numPoints);\r\n                        for (i = 0; i < shape.numPoints * shape.pixelsPerPoint; ++i) {\r\n                            ++neighborCounter[asymNeighIds[i]];\r\n                        }\r\n                        for (i = 1; i < shape.numPoints; ++i) {\r\n                            neighborLinearOffset[i] = neighborLinearOffset[i - 1] +\r\n                                neighborCounter[i - 1] + shape.pixelsPerPoint;\r\n                        }\r\n                        this.log('Counter', neighborCounter);\r\n                        this.log('Linear offset', neighborLinearOffset);\r\n                        check = 0;\r\n                        maxValue = 0;\r\n                        maxId = 0;\r\n                        for (i = 0; i < neighborCounter.length; ++i) {\r\n                            check += neighborCounter[i];\r\n                            if (neighborCounter[i] > maxValue) {\r\n                                maxValue = neighborCounter[i];\r\n                                maxId = i;\r\n                            }\r\n                        }\r\n                        this.log('Number of indirect links', check);\r\n                        this.log('Most central point', maxId);\r\n                        this.log('Number of indirect links for the central point', maxValue);\r\n                        this.numNeighPerRow =\r\n                            Math.ceil(Math.sqrt(shape.numPoints * shape.pixelsPerPoint * 2));\r\n                        this.log('numNeighPerRow', this.numNeighPerRow);\r\n                        {\r\n                            offsets = new Float32Array(this.pointsPerRow * this.numRows * 3);\r\n                            pointOffset = 0;\r\n                            for (i = 0; i < this.numPoints; ++i) {\r\n                                totalNeighbors = shape.pixelsPerPoint + neighborCounter[i];\r\n                                offsets[i * 3 + 0] = (pointOffset) % (this.numNeighPerRow);\r\n                                offsets[i * 3 + 1] = Math.floor((pointOffset) / (this.numNeighPerRow));\r\n                                offsets[i * 3 + 2] = totalNeighbors;\r\n                                pointOffset += totalNeighbors;\r\n                            }\r\n                            this.log('Offsets', offsets);\r\n                            this.probOffsetTexture = gl_util.createAndConfigureTexture(this.gpgpu.gl, this.pointsPerRow, this.numRows, 3, offsets);\r\n                        }\r\n                        {\r\n                            probabilities = new Float32Array(this.numNeighPerRow * this.numNeighPerRow);\r\n                            neighIds = new Float32Array(this.numNeighPerRow * this.numNeighPerRow);\r\n                            assignedNeighborCounter = new Uint32Array(this.numPoints);\r\n                            for (i = 0; i < this.numPoints; ++i) {\r\n                                for (n = 0; n < shape.pixelsPerPoint; ++n) {\r\n                                    linearId = i * shape.pixelsPerPoint + n;\r\n                                    pointId = knnIndicesData[linearId];\r\n                                    probability = gaussianDistributionsData[linearId];\r\n                                    symMatrixDirectId = neighborLinearOffset[i] + n;\r\n                                    symMatrixIndirectId = neighborLinearOffset[pointId] +\r\n                                        shape.pixelsPerPoint +\r\n                                        assignedNeighborCounter[pointId];\r\n                                    probabilities[symMatrixDirectId] = probability;\r\n                                    probabilities[symMatrixIndirectId] = probability;\r\n                                    neighIds[symMatrixDirectId] = pointId;\r\n                                    neighIds[symMatrixIndirectId] = i;\r\n                                    ++assignedNeighborCounter[pointId];\r\n                                }\r\n                            }\r\n                            this.log('Probabilities', probabilities);\r\n                            this.log('Neighbors', neighIds);\r\n                            this.probTexture = gl_util.createAndConfigureTexture(this.gpgpu.gl, this.numNeighPerRow, this.numNeighPerRow, 1, probabilities);\r\n                            this.probNeighIdTexture = gl_util.createAndConfigureTexture(this.gpgpu.gl, this.numNeighPerRow, this.numNeighPerRow, 1, neighIds);\r\n                        }\r\n                        gaussianDistributions.dispose();\r\n                        knnIndices.dispose();\r\n                        this.log('...done!');\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNEOptimizer.prototype.initializedNeighborhoods = function () {\r\n        return this.probNeighIdTexture != null;\r\n    };\r\n    TSNEOptimizer.prototype.updateExaggeration = function () {\r\n        if (this._exaggeration !== undefined) {\r\n            this._exaggeration.dispose();\r\n        }\r\n        if (typeof this.rawExaggeration === 'number') {\r\n            this._exaggeration = tf.scalar(this.rawExaggeration);\r\n            return;\r\n        }\r\n        if (this._iteration <= this.rawExaggeration[0].iteration) {\r\n            this._exaggeration = tf.scalar(this.rawExaggeration[0].value);\r\n            return;\r\n        }\r\n        if (this._iteration >=\r\n            this.rawExaggeration[this.rawExaggeration.length - 1].iteration) {\r\n            this._exaggeration = tf.scalar(this.rawExaggeration[this.rawExaggeration.length - 1].value);\r\n            return;\r\n        }\r\n        var i = 0;\r\n        while (i < this.rawExaggeration.length &&\r\n            this._iteration < this.rawExaggeration[i].iteration) {\r\n            ++i;\r\n        }\r\n        var it0 = this.rawExaggeration[i].iteration;\r\n        var it1 = this.rawExaggeration[i + 1].iteration;\r\n        var v0 = this.rawExaggeration[i].value;\r\n        var v1 = this.rawExaggeration[i + 1].value;\r\n        var f = (it1 - this._iteration) / (it1 - it0);\r\n        var v = v0 * f + v1 * (1 - f);\r\n        this._exaggeration = tf.scalar(v);\r\n    };\r\n    TSNEOptimizer.prototype.iterate = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var normQ, _a, _b;\r\n            return tslib_1.__generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        if (!this.initializedNeighborhoods()) {\r\n                            throw new Error('No neighborhoods defined. You may want to call\\\n                    initializeNeighbors or initializeNeighborsFromKNNGraph');\r\n                        }\r\n                        this.updateSplatTextureDiameter();\r\n                        this.updateExaggeration();\r\n                        _b = tf.tidy(function () {\r\n                            _this.splatPoints();\r\n                            var interpQ = tf.zeros([_this.numRows, _this.pointsPerRow]);\r\n                            var interpXY = tf.zeros([_this.numRows, _this.pointsPerRow * 2]);\r\n                            _this.computeInterpolatedQ(interpQ);\r\n                            _this.computeInterpolatedXY(interpXY);\r\n                            var normQ = interpQ.sum();\r\n                            var repulsiveForces = interpXY.div(normQ);\r\n                            var attractiveForces = tf.zeros([_this.numRows, _this.pointsPerRow * 2]);\r\n                            _this.computeAttractiveForces(attractiveForces);\r\n                            var gradientIter = attractiveForces.mul(_this._exaggeration).sub(repulsiveForces);\r\n                            var gradient = _this.gradient.mul(_this._momentum).sub(gradientIter);\r\n                            _this.gradient.dispose();\r\n                            return [gradient, normQ];\r\n                        }), this.gradient = _b[0], normQ = _b[1];\r\n                        _a = this;\r\n                        return [4, normQ.data()];\r\n                    case 1:\r\n                        _a._normQ = (_c.sent())[0];\r\n                        normQ.dispose();\r\n                        this.embedding = tf.tidy(function () {\r\n                            var embedding = _this.embedding.add(_this.gradient);\r\n                            _this.embedding.dispose();\r\n                            return embedding;\r\n                        });\r\n                        return [4, this.computeBoundaries()];\r\n                    case 2:\r\n                        _c.sent();\r\n                        ++this._iteration;\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNEOptimizer.prototype.log = function (str, obj) {\r\n        if (this.verbose) {\r\n            if (obj != null) {\r\n                console.log(str + \": \\t\" + obj);\r\n            }\r\n            else {\r\n                console.log(str);\r\n            }\r\n        }\r\n    };\r\n    TSNEOptimizer.prototype.initializeRepulsiveForceTextures = function () {\r\n        this._splatTexture = gl_util.createAndConfigureInterpolatedTexture(this.gpgpu.gl, this.splatTextureDiameter, this.splatTextureDiameter, 4, null);\r\n        this.kernelSupport = 2.5;\r\n        var kernel = new Float32Array(this.kernelTextureDiameter *\r\n            this.kernelTextureDiameter * 4);\r\n        var kernelRadius = Math.floor(this.kernelTextureDiameter / 2);\r\n        var j = 0;\r\n        var i = 0;\r\n        for (j = 0; j < this.kernelTextureDiameter; ++j) {\r\n            for (i = 0; i < this.kernelTextureDiameter; ++i) {\r\n                var x = (i - kernelRadius) / kernelRadius * this.kernelSupport;\r\n                var y = (j - kernelRadius) / kernelRadius * this.kernelSupport;\r\n                var euclSquared = x * x + y * y;\r\n                var tStudent = 1. / (1. + euclSquared);\r\n                var id = (j * this.kernelTextureDiameter + i) * 4;\r\n                kernel[id + 0] = tStudent;\r\n                kernel[id + 1] = tStudent * tStudent * x;\r\n                kernel[id + 2] = tStudent * tStudent * y;\r\n                kernel[id + 3] = 1;\r\n            }\r\n        }\r\n        this.kernelTexture = gl_util.createAndConfigureInterpolatedTexture(this.gpgpu.gl, this.kernelTextureDiameter, this.kernelTextureDiameter, 4, kernel);\r\n    };\r\n    TSNEOptimizer.prototype.initilizeCustomWebGLPrograms = function () {\r\n        this.log('\\tCreating custom programs...');\r\n        this.embeddingInitializationProgram =\r\n            tsne_util.createEmbeddingInitializationProgram(this.gpgpu);\r\n        this.embeddingSplatterProgram =\r\n            tsne_util.createEmbeddingSplatterProgram(this.gpgpu);\r\n        var splatVertexId = new Float32Array(this.numPoints * 6);\r\n        {\r\n            var i = 0;\r\n            var id = 0;\r\n            for (i = 0; i < this.numPoints; ++i) {\r\n                id = i * 6;\r\n                splatVertexId[id + 0] = 0 + i * 4;\r\n                splatVertexId[id + 1] = 1 + i * 4;\r\n                splatVertexId[id + 2] = 2 + i * 4;\r\n                splatVertexId[id + 3] = 0 + i * 4;\r\n                splatVertexId[id + 4] = 2 + i * 4;\r\n                splatVertexId[id + 5] = 3 + i * 4;\r\n            }\r\n        }\r\n        this.splatVertexIdBuffer = tf.webgl.webgl_util.createStaticVertexBuffer(this.gpgpu.gl, splatVertexId);\r\n        this.qInterpolatorProgram =\r\n            tsne_util.createQInterpolatorProgram(this.gpgpu);\r\n        this.xyInterpolatorProgram =\r\n            tsne_util.createXYInterpolatorProgram(this.gpgpu);\r\n        this.attractiveForcesProgram =\r\n            tsne_util.createAttractiveForcesComputationProgram(this.gpgpu);\r\n        this.distributionParameterssComputationProgram =\r\n            tsne_util.createDistributionParametersComputationProgram(this.gpgpu);\r\n        this.gaussiaDistributionsFromDistancesProgram =\r\n            tsne_util.createGaussiaDistributionsFromDistancesProgram(this.gpgpu);\r\n    };\r\n    TSNEOptimizer.prototype.computeBoundaries = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var _a, min, max, minData, maxData, percentageOffset, offsetX, offsetY;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = tf.tidy(function () {\r\n                            var embedding2D = _this.embedding.reshape([_this.numRows * _this.pointsPerRow, 2])\r\n                                .slice([0, 0], [_this.numPoints, 2]);\r\n                            var min = embedding2D.min(0);\r\n                            var max = embedding2D.max(0);\r\n                            return [min, max];\r\n                        }), min = _a[0], max = _a[1];\r\n                        return [4, min.data()];\r\n                    case 1:\r\n                        minData = _b.sent();\r\n                        return [4, max.data()];\r\n                    case 2:\r\n                        maxData = _b.sent();\r\n                        percentageOffset = 0.05;\r\n                        offsetX = (maxData[0] - minData[0]) * percentageOffset;\r\n                        this._minX = minData[0] - offsetX;\r\n                        this._maxX = maxData[0] + offsetX;\r\n                        offsetY = (maxData[1] - minData[1]) * percentageOffset;\r\n                        this._minY = minData[1] - offsetY;\r\n                        this._maxY = maxData[1] + offsetY;\r\n                        min.dispose();\r\n                        max.dispose();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TSNEOptimizer.prototype.updateSplatTextureDiameter = function () {\r\n        var maxSpace = Math.max(this._maxX - this._minX, this._maxY - this._minY);\r\n        var spacePerPixel = 0.35;\r\n        var maxTextureDiameter = 5000;\r\n        var textureDiameter = Math.min(Math.ceil(Math.max(maxSpace / spacePerPixel, 5)), maxTextureDiameter);\r\n        var percChange = Math.abs(this.splatTextureDiameter - textureDiameter) /\r\n            this.splatTextureDiameter;\r\n        if (percChange >= 0.2) {\r\n            this.log('Updating splat-texture diameter', textureDiameter);\r\n            this.gpgpu.gl.deleteTexture(this._splatTexture);\r\n            this.splatTextureDiameter = textureDiameter;\r\n            this._splatTexture = gl_util.createAndConfigureInterpolatedTexture(this.gpgpu.gl, this.splatTextureDiameter, this.splatTextureDiameter, 4, null);\r\n        }\r\n    };\r\n    TSNEOptimizer.prototype.initializeEmbeddingPositions = function (embedding, random) {\r\n        tsne_util.executeEmbeddingInitializationProgram(this.gpgpu, this.embeddingInitializationProgram, this.backend.getTexture(random.dataId), this.numPoints, this.pointsPerRow, this.numRows, this.backend.getTexture(embedding.dataId));\r\n    };\r\n    TSNEOptimizer.prototype.splatPoints = function () {\r\n        tsne_util.executeEmbeddingSplatterProgram(this.gpgpu, this.embeddingSplatterProgram, this._splatTexture, this.backend.getTexture(this.embedding.dataId), this.kernelTexture, this.splatTextureDiameter, this.numPoints, this._minX, this._minY, this._maxX, this._maxY, this.kernelSupport, this.pointsPerRow, this.numRows, this.splatVertexIdBuffer);\r\n    };\r\n    TSNEOptimizer.prototype.computeInterpolatedQ = function (interpolatedQ) {\r\n        tsne_util.executeQInterpolatorProgram(this.gpgpu, this.qInterpolatorProgram, this._splatTexture, this.backend.getTexture(this.embedding.dataId), this.numPoints, this._minX, this._minY, this._maxX, this._maxY, this.pointsPerRow, this.numRows, this.backend.getTexture(interpolatedQ.dataId));\r\n    };\r\n    TSNEOptimizer.prototype.computeInterpolatedXY = function (interpolatedXY) {\r\n        tsne_util.executeXYInterpolatorProgram(this.gpgpu, this.xyInterpolatorProgram, this._splatTexture, this.backend.getTexture(this.embedding.dataId), this.backend.getTexture(interpolatedXY.dataId), this.numPoints, this._minX, this._minY, this._maxX, this._maxY, this.pointsPerRow, this.numRows, this._eta);\r\n    };\r\n    TSNEOptimizer.prototype.computeAttractiveForces = function (attractiveForces) {\r\n        tsne_util.executeAttractiveForcesComputationProgram(this.gpgpu, this.attractiveForcesProgram, this.backend.getTexture(this.embedding.dataId), this.probOffsetTexture, this.probNeighIdTexture, this.probTexture, this.numPoints, this.numNeighPerRow, this.pointsPerRow, this.numRows, this._eta, this.backend.getTexture(attractiveForces.dataId));\r\n    };\r\n    TSNEOptimizer.prototype.computeDistributionParameters = function (distributionParameters, shape, perplexity, knnGraph) {\r\n        tsne_util.executeDistributionParametersComputationProgram(this.gpgpu, this.distributionParameterssComputationProgram, knnGraph, shape.numPoints, shape.pixelsPerPoint, shape.pointsPerRow, shape.numRows, perplexity, distributionParameters);\r\n    };\r\n    TSNEOptimizer.prototype.computeGaussianDistributions = function (distributions, distributionParameters, shape, knnGraph) {\r\n        tsne_util.executeGaussiaDistributionsFromDistancesProgram(this.gpgpu, this.gaussiaDistributionsFromDistancesProgram, knnGraph, distributionParameters, shape.numPoints, shape.pixelsPerPoint, shape.pointsPerRow, shape.numRows, this.backend.getTexture(distributions.dataId));\r\n    };\r\n    return TSNEOptimizer;\r\n}());\r\nexport { TSNEOptimizer };\r\n//# sourceMappingURL=tsne_optimizer.js.map","map":"{\"version\":3,\"file\":\"tsne_optimizer.js\",\"sourceRoot\":\"\",\"sources\":[\"src/tsne_optimizer.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/tsne/tfjs-tsne/tsne_optimizer.d.ts","text":"import * as tf from '@tensorflow/tfjs-core';\r\nimport { RearrangedData } from './interfaces';\r\nexport declare class TSNEOptimizer {\r\n    private _eta;\r\n    private _momentum;\r\n    private _exaggeration;\r\n    private rawExaggeration;\r\n    private verbose;\r\n    private numPoints;\r\n    private pointsPerRow;\r\n    private numRows;\r\n    private splatTextureDiameter;\r\n    private kernelTextureDiameter;\r\n    private kernelSupport;\r\n    private embedding;\r\n    private gradient;\r\n    private backend;\r\n    private gpgpu;\r\n    private embeddingInitializationProgram;\r\n    private embeddingSplatterProgram;\r\n    private qInterpolatorProgram;\r\n    private xyInterpolatorProgram;\r\n    private attractiveForcesProgram;\r\n    private distributionParameterssComputationProgram;\r\n    private gaussiaDistributionsFromDistancesProgram;\r\n    private _splatTexture;\r\n    private kernelTexture;\r\n    private splatVertexIdBuffer;\r\n    private probOffsetTexture;\r\n    private probNeighIdTexture;\r\n    private probTexture;\r\n    private numNeighPerRow;\r\n    private _minX;\r\n    private _maxX;\r\n    private _minY;\r\n    private _maxY;\r\n    private _normQ;\r\n    private _iteration;\r\n    readonly minX: number;\r\n    readonly maxX: number;\r\n    readonly minY: number;\r\n    readonly maxY: number;\r\n    readonly iteration: number;\r\n    readonly numberOfPoints: number;\r\n    readonly numberOfPointsPerRow: number;\r\n    readonly numberOfRows: number;\r\n    readonly embeddingCoordinates: tf.Tensor<tf.Rank>;\r\n    readonly embedding2D: tf.Tensor;\r\n    readonly embeddingTexture: WebGLTexture;\r\n    readonly splatTexture: WebGLTexture;\r\n    readonly normalizationQ: number;\r\n    readonly exaggerationAtCurrentIteration: number;\r\n    exaggeration: number | Array<{\r\n        iteration: number;\r\n        value: number;\r\n    }>;\r\n    momentum: number;\r\n    eta: number;\r\n    constructor(numPoints: number, verbose?: boolean, splatTextureDiameter?: number, kernelTextureRadius?: number);\r\n    dispose(): void;\r\n    initializeEmbedding(): void;\r\n    initializeNeighbors(numNeighPerRow: number, offsets: WebGLTexture, probabilities: WebGLTexture, neighIds: WebGLTexture): void;\r\n    initializeNeighborsFromKNNGraph(numPoints: number, numNeighbors: number, distances: Float32Array, indices: Uint32Array): Promise<void>;\r\n    initializeNeighborsFromKNNTexture(shape: RearrangedData, knnGraph: WebGLTexture): Promise<void>;\r\n    initializedNeighborhoods(): boolean;\r\n    updateExaggeration(): void;\r\n    iterate(): Promise<void>;\r\n    private log(str, obj?);\r\n    private initializeRepulsiveForceTextures();\r\n    private initilizeCustomWebGLPrograms();\r\n    private computeBoundaries();\r\n    private updateSplatTextureDiameter();\r\n    private initializeEmbeddingPositions(embedding, random);\r\n    private splatPoints();\r\n    private computeInterpolatedQ(interpolatedQ);\r\n    private computeInterpolatedXY(interpolatedXY);\r\n    private computeAttractiveForces(attractiveForces);\r\n    private computeDistributionParameters(distributionParameters, shape, perplexity, knnGraph);\r\n    private computeGaussianDistributions(distributions, distributionParameters, shape, knnGraph);\r\n}\r\n"}}
